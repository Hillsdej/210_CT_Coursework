//Question 1
// research: https://www.quora.com/Is-there-an-algorithm-to-find-the-nearest-square-of-a-given-number
// A perfect square is a number that can be expressed as a product of two equal integers
// Take the root of the number
// round it down to an integer (floor_int) and then add 1 (ceil_int)
// square both integers
// calculate which square is the closest to the original number and return it.

PERFECT-SQUARE(NUM):
    lower_root_num <- squareroot(NUM)
    lower_root_num <- int(lower_root_num)
    upper_root_num <- lower_root + 1
    lower_square <- lower_root_num * lower_root_num
    upper_square <- upper_root_num * upper_root_num
    
    if upper_square >= NUM:
        return lower_root
    else:
        return upper_root

//Question 2

Both algorithms in week_1 c/w are O(n)

//Question 3

INPUT <- MATRIXA
INPUT <- MATRIXB

MATRIXADDITION(MATRIXA,MATRIXB)
    for each value in row and value in column:
        total = rowValue + columnValue

        return sumtotal

MATRIXSUBTRACTION(MATRIXA,MATRIXB)
    for each value in row and value in column:
        total = rowValue - columnValue

        return subtractiontotal

MATRIXMULTIPLICATION(MATRIXA,MATRIXB)
    x <- 1
    while true:
        if x > length MATRIXA:
            break
        else:
            num <- multiply(row,col)
            return num
            x += 1
    
    for each rowValue in row and colValue in col:    
       total += rval*cval

    return total
       
       
       
For i <- 1 to n:
    for j <- to n:
    INPUT element at position [i,j]
    
M[i,j]
M[i][j]
        
